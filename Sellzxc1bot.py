from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "8112352565:AAF4beRypuE2UH7AvwIDemjRGJek9CQiwvo"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    await update.message.reply_sticker("CAACAgIAAxkBAAEQOd9oYLSRXUAuumpO4FkVF4cnD6SWVwACoiQAAkIYSEoB_5-7g_3tNDYE")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
    keyboard = [
        [
            InlineKeyboardButton("üìå –£—Å–ª—É–≥–∏", callback_data='services'),
            InlineKeyboardButton("üíª –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤", callback_data='bots_creation'),
        ],
        [
            InlineKeyboardButton("üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤", callback_data='sites_creation'),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!.\n"
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'services':
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ë–æ—Ç—ã", callback_data='bots_creation')],
            [InlineKeyboardButton("üåê –°–∞–π—Ç—ã", callback_data='sites_creation')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(
            "*üîπ–ú–æ–∏ —É—Å–ª—É–≥–∏:*\n\n"
            "-–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤:\n"
            "- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "- –ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã\n"
            "- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã\n"
            "- –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "-–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ñ—Ç–æ–≤\n"
            "-–∏–≥—Ä—ã*\n"
            "-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è *\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == 'bots_creation':
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –∫ —É—Å–ª—É–≥–∞–º", callback_data='services')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(
            "üîπ–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤\n\n"
            "–Ø —Å–æ–∑–¥–∞—é –±–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á:\n"
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤\n"
            "‚úÖ –ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏\n"
            "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ-–±–æ—Ç—ã\n\n"
            "–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: Python (aiogram, python-telegram-bot), Node.js, PHP.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞: @Sellzxc1",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == 'sites_creation':
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –∫ —É—Å–ª—É–≥–∞–º", callback_data='services')],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(
            "üîπ–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤\n\n"
            "–Ø —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∞–π—Ç—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üöÄ –õ–µ–Ω–¥–∏–Ω–≥–∏ (–æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∏–∫–∏)\n"
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã\n"
            "üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã\n"
            "üìä –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É—é: HTML/CSS/JS, React, Django, Flask, WordPress.\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –∑–∞–∫–∞–∑–∞: @Sellzxc1",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == 'contacts':
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –∫ —É—Å–ª—É–≥–∞–º", callback_data='services')],
            [InlineKeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data='main_menu')]
        ]
        await query.edit_message_text(
            "üîπ–ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
            "üì© Email: sellzxc1@bk.ru\n"
            "üì± Telegram: @Sellzxc1\n"
            "üåç –°–∞–π—Ç: Sellzxc1.github.io",
            reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == 'main_menu':
        keyboard = [
            [
                InlineKeyboardButton("üìå –£—Å–ª—É–≥–∏", callback_data='services'),
                InlineKeyboardButton("üíª –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤", callback_data='bots_creation'),
            ],
            [
                InlineKeyboardButton("üåê –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤", callback_data='sites_creation'),
                InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts'),
            ]
        ]
        await query.edit_message_text(
            "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard))

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button_click))

    application.run_polling()

if __name__ == '__main__':
    main()